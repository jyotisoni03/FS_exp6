// app.js
// -----------------------------------------
// 🏦 Account Transfer System with Balance Validation
// Node.js + Express + MongoDB (No Transactions)
// -----------------------------------------

const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const morgan = require('morgan');

const app = express();
app.use(bodyParser.json());
app.use(morgan('dev'));

// MongoDB Connection (change if needed)
const MONGO_URI = 'mongodb://127.0.0.1:27017/account_transfer_demo';
mongoose.connect(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('✅ Connected to MongoDB'))
  .catch(err => {
    console.error('❌ MongoDB connection error:', err);
    process.exit(1);
  });

// Mongoose Schema
const accountSchema = new mongoose.Schema({
  name: { type: String, required: true },
  balance: { type: Number, required: true, min: 0 }
});

const Account = mongoose.model('Account', accountSchema);

// Helper
function isPositiveNumber(n) {
  return typeof n === 'number' && isFinite(n) && n > 0;
}

// -----------------------------------------
// 🧾 Create New Account
// -----------------------------------------
app.post('/accounts', async (req, res) => {
  try {
    const { name, balance } = req.body;
    if (!name || isNaN(balance) || Number(balance) < 0) {
      return res.status(400).json({ error: 'Provide valid name and non-negative balance.' });
    }
    const newAccount = new Account({ name, balance: Number(balance) });
    await newAccount.save();
    res.status(201).json(newAccount);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Error creating account.' });
  }
});

// -----------------------------------------
// 👀 Get All Accounts
// -----------------------------------------
app.get('/accounts', async (req, res) => {
  const accounts = await Account.find().lean();
  res.json(accounts);
});

// -----------------------------------------
// 🔍 Get Account by ID
// -----------------------------------------
app.get('/accounts/:id', async (req, res) => {
  try {
    const acc = await Account.findById(req.params.id);
    if (!acc) return res.status(404).json({ error: 'Account not found' });
    res.json(acc);
  } catch {
    res.status(400).json({ error: 'Invalid account ID format.' });
  }
});

// -----------------------------------------
// 💸 Transfer Money (Core Logic)
// -----------------------------------------
app.post('/transfer', async (req, res) => {
  try {
    const { from, to, amount } = req.body;
    const numericAmount = Number(amount);

    if (!from || !to || from === to)
      return res.status(400).json({ error: 'Provide valid "from" and "to" account IDs (they must differ).' });

    if (!isPositiveNumber(numericAmount))
      return res.status(400).json({ error: '"amount" must be a positive number.' });

    // Step 1: Check sender balance and deduct atomically if enough
    const sender = await Account.findOneAndUpdate(
      { _id: from, balance: { $gte: numericAmount } },
      { $inc: { balance: -numericAmount } },
      { new: true }
    );

    if (!sender) {
      const exists = await Account.exists({ _id: from });
      return res.status(exists ? 400 : 404).json({
        error: exists ? 'Insufficient funds in sender account.' : 'Sender account not found.'
      });
    }

    // Step 2: Add to receiver’s account
    const receiver = await Account.findOneAndUpdate(
      { _id: to },
      { $inc: { balance: numericAmount } },
      { new: true }
    );

    if (!receiver) {
      // Receiver not found → rollback sender
      await Account.findOneAndUpdate(
        { _id: from },
        { $inc: { balance: numericAmount } },
        { new: true }
      );
      return res.status(404).json({
        error: 'Receiver account not found. Sender balance restored.'
      });
    }

    // Step 3: Success
    return res.json({
      message: '✅ Transfer successful',
      details: {
        from: { id: sender._id, name: sender.name, balance: sender.balance },
        to: { id: receiver._id, name: receiver.name, balance: receiver.balance },
        amount: numericAmount
      }
    });

  } catch (err) {
    console.error('Transfer error:', err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// -----------------------------------------
// 🚀 Start Server
// -----------------------------------------
const PORT = 3000;
app.listen(PORT, () => {
  console.log(🚀 Server running at http://localhost:${PORT});
  console.log('Use endpoints: POST /accounts, GET /accounts, POST /transfer');
});
